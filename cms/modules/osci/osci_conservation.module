<?php

function osci_conservation_init() {
	// jQuery tabs
	drupal_add_library('system', 'ui.slider');
	// Polymaps
	drupal_add_js(drupal_get_path('module', 'osci_conservation') . '/js/polymaps.js');
	// Conservation Assets
	drupal_add_js(drupal_get_path('module', 'osci_conservation') . '/js/osci_conservation.js');
	drupal_add_css(drupal_get_path('module', 'osci_conservation') . '/css/osci_conservation.css');
}


function osci_conservation_menu() {
    $items = array();

    $items['conservation-demo'] = array(
        'title'             => t('Conservation Demo'),
        'page callback'     => 'osci_conservation_demo',
        'access arguments'  => array('access content'),
    );

    $items['admin/config/system/iip'] = array(
        'title'             => t('IIP Settings'),
        'page callback'     => 'drupal_get_form',
        'page arguments'    => array('osci_conservation_iip_admin_form'),
        'access arguments'  => array('administer site configuration'),
        'file'              => 'osci_conservation.admin.inc'
    );
    
    $items['conservation/is-svg-asset'] = array(
        'title'             => t('SVG Asset Callback'),
        'page callback'     => 'osci_conservation_is_svg_asset',
        'access arguments'  => array('access content'),
        'type'              => MENU_CALLBACK
    );

    $items['conservation/view/%'] = array(
        'title'             => t('View a conservation asset as a standalone figure'),
        'page callback'     => 'osci_conservation_view',
        'page arguments'    => array(2),
        'access arguments'  => array('access content'),
        'type'              => MENU_CALLBACK
    );
    
    return $items;
}

function osci_conservation_demo() {
    $nodes = variable_get('osci_conservation_demo_nodes', array());
	$ret = "";
	
    foreach ($nodes as $nid) {
        $node = node_load($nid);
        // build conservation asset div
        $ret .= "<h2>$node->title</h2>";
        $ret .= '<figure style="width:640px; height:480px;">';
        $ret .= _osci_conservation_get_conservation_html($node->nid);
        $ret .= '</figure>';
    }

    return $ret;
}

function osci_conservation_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id == 'iip_asset_node_form') {
        // hide the image field, and the attributes field
        // we populate it automatically from the IIP server
        $form['field_image']['#attributes']['style'] = "display:none;";
        $form['field_ptiff_attr']['#attributes']['style'] = "display:none;";

        // add the callback to grab the image after submission
        array_unshift($form['#validate'], '_osci_conservation_get_ptiff_image');
        array_unshift($form['#validate'], '_osci_conservation_get_ptiff_attr');
        // get the options from the drupal variable
        $hosts = variable_get('osci_conservation_iip_hosts', array());
        $form['field_iip_server']['und']['#options'] = array();
        foreach ($hosts as $host) {
            $form['field_iip_server']['und']['#options'][$host['name']] = $host['name'];
        }
    }

    if ($form_id == 'conservation_asset_node_form') {
        // add the color picker javascript
        drupal_add_js(drupal_get_path('module', 'osci_conservation') . '/js/jscolor/jscolor.js');
        drupal_add_css(drupal_get_path('module', 'osci_conservation') . '/css/osci_conservation.css');
        
        // add the annotation flag checkbox
        foreach ($form['field_assets']['und'] as $key => $value) {
            if (is_numeric($key)) {

                // add a title to the node reference, for asthetics
                $form['field_assets']['und'][$key]['nid']['#title'] = 'Asset';

                // ANNOTATION FLAG
                // get default value
                $default = '';
                $annotationState = FALSE;
                if (isset($form_state['node']->field_assets['und'][$key]['annotation_flag'])) {
                    $default = (bool) $form_state['node']->field_assets['und'][$key]['annotation_flag'];
                    // store for later for the color selector
                    $annotationState = $default;
                }
                // expose the new field with the default value
                $form['field_assets']['und'][$key]['annotation_flag'] = array(
                    '#type'             => 'checkbox',
                    '#title'            => 'Annotation Asset',
                    '#default_value'    => $default,
                    '#weight'           => 100
                );

                // LAYER TITLE
                // get default if set
                $default = '';
                if (isset($form_state['node']->field_assets['und'][$key]['title'])) {
                    $default = $form_state['node']->field_assets['und'][$key]['title'];
                }
                // expose the new field with the default value
                $form['field_assets']['und'][$key]['title'] = array(
                    '#type'             => 'textfield',
                    '#title'            => 'Layer Title',
                    '#default_value'    => $default,
                    '#weight'           => 99
                );
                
                // COLOR SELECTION
                // should be hidden and only exposed when an svg node is 
                // selected and annotation flag is set
                $default = '';
                if (isset($form_state['node']->field_assets['und'][$key]['color'])) {
                    $default = $form_state['node']->field_assets['und'][$key]['color'];
                }
                $form['field_assets']['und'][$key]['color'] = array(
                    '#type'             => 'textfield',
                    '#required'         => FALSE,
                    '#weight'           => 101,
                    '#default_value'    => $default,
                    '#field_suffix'     => '&nbsp;<label class="option">Color</label>',
                    '#attributes'       => array(
                        'class' => array(
                            'color {pickerClosable:true,required:false}',
                            'ca-edit-color'
                        ),
                    ),
                );
                // if the annotation state from above is true, show the picker
                if ($annotationState) {
                    unset($form['field_assets']['und'][$key]['color']['#attributes']['disabled']);
                }
                              
                // add a bit of markup/script to automate the color picker
                global $base_url; 
                $script = 
<<<SCRIPT
<script>
    jQuery(function(jQuery) {
        var $ = jQuery;
        var togglePicker = function() {
            var checkBox = $(this);
            if($(this).attr("checked")) {
                var inputText = $('#edit-field-assets-und-{$key}-nid').val();
                var matches = inputText.match(/\[nid:(\d+)\]/);
                if (matches[1]) {
                    var nid = parseInt(matches[1]);
                } else return;
                // send a request to drupal and determine if this is svg or not
                $.post('{$base_url}/conservation/is-svg-asset', {nid: nid}, function(data) {
                    if (data.is_svg_asset) {
                        $("#edit-field-assets-und-{$key}-color").parent().css("display", "block");
                    }
                    else {
                        $("#edit-field-assets-und-{$key}-color").parent().css("display", "none");
                    }
                }, 'json');
            }
            else {
                $("#edit-field-assets-und-{$key}-color").parent().css("display", "none");
            }
        };
        $("#edit-field-assets-und-{$key}-annotation-flag").each(togglePicker);
        $("#edit-field-assets-und-{$key}-annotation-flag").bind("click", togglePicker);
    });
</script>
SCRIPT;
                $form['field_assets']['und'][$key]['colorpicker'] = array(
                    '#weight' => 102,
                    '#markup' => $script,
                );
            }
        }
        // hide the field_data
        $form['field_data']['#attributes']['style'] = "display:none;";
    }
    
    if ($form_id == 'field_ui_field_edit_form') {
        if ($form['#field']['field_name'] == 'field_assets') {
            $form['field']['settings']['referenceable_types']['#disabled'] = FALSE;
        }
    }
}

function osci_conservation_node_presave($node) {
    if ($node->type == 'conservation_asset') {
        // get the aspect ratio for this conservation asset
        $node->field_aspect_ratio['und'][0]['value'] = _osci_conservation_get_conservation_aspect($node);
        
        // form the serialized field_data
        $data = array();
        // grab the flags from each asset
        foreach ($node->field_assets['und'] as $key => $value) {
            $data[] = $value;
        }
        $serialized_data = serialize($data);
        $node->field_data['und'][0]['value'] = $serialized_data;
    }
}

function osci_conservation_node_load($nodes, $types) {
    foreach ($nodes as &$node) {
        if ($node->type == 'conservation_asset') {
            // get serialized flag data
            $flags = isset($node->field_data['und']) ? unserialize($node->field_data['und'][0]['value']) : null;
            if (!is_array($flags)) {
            	watchdog('osci_conservation', 'Invalid file flags on '.$node->nid);
            	return;
            }
            $assets = $node->field_assets['und'];
            // apply for each flag to the field_assets field
            foreach ($flags as $flag) {
                foreach ($assets as $key => $asset) {
                    if ($flag['nid'] == $asset['nid']) {
                        $node->field_assets['und'][$key]['annotation_flag'] = $flag['annotation_flag'];
                        $node->field_assets['und'][$key]['title'] = $flag['title'];
                        $node->field_assets['und'][$key]['color'] = $flag['color'];
                    }
                }
            }
        }
        if ($node->type == 'svg_asset') {
            // get the attributes and attach to the node
            $attr = _osci_conservation_get_svg_attr(drupal_realpath($node->field_svg['und'][0]['uri']));
            $node->field_svg['und'][0]['width'] = $attr->width;
            $node->field_svg['und'][0]['height'] = $attr->height;            
        }
    }
}


/*
 * utility callback that determines if nid provided is an svg asset or not
 * returns true/false
 */
function osci_conservation_is_svg_asset() {
    $nid = (int) $_POST['nid'];
    $node = node_load($nid);
    $response = new stdClass();
    if ($node && $node->type == 'svg_asset') {
        $response->is_svg_asset = TRUE;
    }
    else {
        $response->is_svg_asset = FALSE;
    }
    print json_encode($response);
}


// called as a form verification callback
// retrieves the full image from the iip server and saves it to the node as the static image
function _osci_conservation_get_ptiff_image($form, &$form_state) {
    $iip_host = _osci_conservation_iip_host_url($form_state['values']['field_iip_server']['und'][0]['value']);
    $command = "?FIF={$form_state['values']['field_ptiff_path']['und'][0]['value']}&CVT=jpeg";
    $curl = curl_init($iip_host . $command);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
    $output = curl_exec($curl);
    // Save the file with the new Drupal 7 File API
    $fo = file_save_data($output, "public://iip_thumbs/iip_image_node_" . $form_state['node']->nid . ".jpg", FILE_EXISTS_REPLACE);
    if ($fo && getimagesize($fo->uri)) {
        $form_state['values']['field_image']['und'][0] = (array) $fo;
    } else {
        if ($fo)
            file_delete($fo);
        form_set_error('field_ptiff_path', 'Could not retrieve an image thumbnail.  Please check the path and server');
    }
}


// called as a form verification callback
// retrieves the image attributes from the iip server and saves it serialized in field_ptiff_attr
function _osci_conservation_get_ptiff_attr($form, &$form_state) {
    // gather the server url and the ptiff path
    $iip_srv_url = _osci_conservation_iip_host_url($form_state['values']['field_iip_server']['und'][0]['value']);
    $ptiff_path = $form_state['values']['field_ptiff_path']['und'][0]['value'];

    // Get image data as a text response from the IIP server
    // Must supply the fif parameter
    $url = "{$iip_srv_url}?FIF={$ptiff_path}&OBJ=Basic-info";
    $curl = curl_init($url);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
    $res = curl_exec($curl);
    if ($res != false && !stristr($res, 'error')) {
        // Parse the image maximum dimensions and the number of zoom layers
        preg_match('/Max-size:(\d+) (\d+)/', $res, $matches);
        $iw = $matches[1];
        $ih = $matches[2];
        preg_match('/Resolution-number:(\d+)/', $res, $matches);
        $zl = $matches[1];

        // Craft our attributes array
        $attr = array(
            'width' => $iw,
            'height' => $ih,
            'zoom_levels' => $zl,
        );
        // place attributes into proper field, serialized
        $form_state['values']['field_ptiff_attr']['und'][0]['value'] = serialize($attr);
    } else {
        form_set_error('field_ptiff_path', 'Could not retrieve image information.  Please check path and server');
    }
}

// turns an iip host name into an iip host url by comparing with 
// the list of hosts stored in the admin setting
function _osci_conservation_iip_host_url($host_name) {
    $avail_hosts = variable_get('osci_conservation_iip_hosts');
    // find the host url
    foreach ($avail_hosts as $host) {
        if ($host['name'] == $host_name) {
            return $host['url'];
        }
    }
}

function _osci_conservation_get_conservation_html($nid) {
    if (!is_numeric($nid))
        return;
    $node = node_load($nid);
    $thumbStyle = 'osci_conservation_100w';
    
    // create a unique id for this conservation asset
    $id = "conservation-asset-" . preg_replace('/\./', '', ((string) microtime(TRUE)));

    // build a list of the layers
    $layers = "";
    $num_layers = 1;
    foreach ($node->field_assets['und'] as $asset) {
        // load in the referenced asset
        $layer_node = node_load($asset['nid']);
        $data = array();

        // set layer number, parent, and id
        $data['layer_num'] = $num_layers;
        $data['layer_id'] = $layer_node->nid;
        $data['parent_asset'] = $id;
        $data['id'] = "{$id}-layer-{$num_layers}";
        $num_layers++;

        // set normalized type according to asset type
        switch ($layer_node->type) {
            case "iip_asset":
                $data['type'] = 'iip';
                break;
            case "image_asset":
                $data['type'] = 'image';
                break;
            case "svg_asset":
                $data['type'] = 'svg';
                break;
        }

        // set the annotation flag
        if (isset($asset['annotation_flag']) && $asset['annotation_flag'] > 0) {
            $data['annotation'] = "true";
        } else {
            $data['annotation'] = "false";
        }

        // set the title if provided, or use the layer node's title
        if (!empty($asset['title'])) {
            $data['title'] = $asset['title'];
        } else {
            $data['title'] = $layer_node->title;
        }

        // set the ptiff specific values
        if ($data['type'] == 'iip') {
            // some of the needed information is serialized
            $attr = unserialize($layer_node->field_ptiff_attr['und'][0]['value']);
            $data['ptiff_server'] = _osci_conservation_iip_host_url($layer_node->field_iip_server['und'][0]['value']);
            $data['ptiff_path'] = $layer_node->field_ptiff_path['und'][0]['value'];
            $data['width'] = $attr['width'];
            $data['height'] = $attr['height'];
            $data['zoom_levels'] = $attr['zoom_levels'];
            $data['thumb'] = image_style_url($thumbStyle, $layer_node->field_image['und'][0]['uri']);
        }

        // set the image specific values
        if ($data['type'] == 'image') {
            $data['image_path'] = file_create_url($layer_node->field_image['und'][0]['uri']);
            $size = getimagesize(drupal_realpath($layer_node->field_image['und'][0]['uri']));
            $data['width'] = $size[0];
            $data['height'] = $size[1];
            $data['thumb'] = image_style_url($thumbStyle, $layer_node->field_image['und'][0]['uri']);
        }
        
        // set the svg specific values
        if ($data['type'] == 'svg') {
            $data['svg_path'] = file_create_url($layer_node->field_svg['und'][0]['uri']);
            $data['width'] = $layer_node->field_svg['und'][0]['width'];
            $data['height'] = $layer_node->field_svg['und'][0]['height'];
            $data['color'] = $asset['color'];
            $data['thumb'] = image_style_url($thumbStyle, $layer_node->field_svg['und'][0]['uri']);
        }

        // form our data attributes string
        $data_string = "";
        foreach ($data as $key => $value) {
            $data_string .= 'data-' . $key . '="' . $value . '" ';
        }

        // form our output for this asset
        $layers .= '<li class="conservation-layer" ' . $data_string . '></li>';
    }

    $ret =    '<div class="conservation-asset" data-aspect="'._osci_conservation_get_conservation_aspect($node)
    		. '" data-collapsed="true" data-nid="'.$nid.'" id="'.$id.'">'
            . '<ul class="conservation-layers" style="display:none;">'
            . $layers
            . '</ul>'
            . '</div>';

    return $ret;
}


function _osci_conservation_get_svg_attr($file_path) {
	$attr = new stdClass;
    // get the width and height from the viewBox attribute of the svg
    $xml = simplexml_load_file($file_path);
    if (is_object($xml)) {
	    $viewBox = explode(' ', (string) $xml->attributes()->viewBox);
	    $attr->width = $viewBox[2] - $viewBox[0];
	    $attr->height = $viewBox[3] - $viewBox[1];
    }
    else {
    	$attr->width = 0;
    	$attr->height = 0;
    }
    return $attr;
}


function _osci_conservation_get_conservation_aspect($node) {
    if (!$node) return 1;
    
    // get the max bounds in pixels of all the layers in this asset
    $width = $height = 0;
    
    foreach ($node->field_assets['und'] as $asset_pointer) {
        $asset = node_load($asset_pointer['nid']);
        
        if ($asset->type == "image_asset") {
            // get the dimensions of the image
            $size = getimagesize(drupal_realpath($asset->field_image['und'][0]['uri']));
            if ($size) {
                if ($size[0] > $width) {
                    $width = $size[0];
                }
                if ($size[1] > $height) {
                    $height = $size[1];
                }
            }
        }
        
        if ($asset->type == "iip_asset") {
            $data = unserialize($asset->field_ptiff_attr['und'][0]['value']);
            if ($data['width'] > $width) {
                $width = $data['width'];
            }
            if ($data['height'] > $height) {
                $height = $data['height'];
            }
        }
        
        if ($asset->type == "svg_asset") {
            if ($asset->field_svg['und'][0]['width'] > $width) {
                $width = $asset->field_svg['und'][0]['width'];
            }
            if ($asset->field_svg['und'][0]['height'] > $height) {
                $height = $asset->field_svg['und'][0]['height'];
            }
        }
    }

    if ($width > 0 && $height > 0) return ($width / $height);
    else return 1;
}

function osci_conservation_view($nid)
{
	drupal_add_library('system', 'ui.slider');
	drupal_add_js(drupal_get_path('module', 'osci_reader') . '/js/amplify.core.js');
	drupal_add_js(drupal_get_path('module', 'osci_iip') . '/js/osci_iip_polymaps.js', 'file');
	drupal_add_js(drupal_get_path('module', 'osci_iip') . '/js/osci_iip.js', 'file');
	drupal_add_js(drupal_get_path('module', 'osci_conservation') . '/js/osci_conservation.js', 'file');
	drupal_add_js(drupal_get_path('module', 'osci_conservation') . '/js/conservation-view.js', 'file');
	drupal_add_css(drupal_get_path('module', 'osci_layout').'/css/osci_layout.css');
	drupal_add_css(drupal_get_path('module', 'osci_conservation') . '/css/osci_conservation.css', 'file');
	drupal_add_css(drupal_get_path('module', 'osci_conservation') . '/css/conservation-view.css', 'file');

	$node = node_load($nid);

	$elements = node_view($node, 'body_copy');

	$catalogNumber = (isset($node->field_osci_catalogue_number['und']) && $node->field_osci_catalogue_number['und'][0]['value']) ? $node->field_osci_catalogue_number['und'][0]['value'] : null;

	$plateNid = null;
	if (isset($elements['field_osci_plate_image'])) {
		$plateNid = ($elements['field_osci_plate_image']['#items'][0]['nid']) ? $elements['field_osci_plate_image']['#items'][0]['nid'] : null;
		$plateCaption = $node->field_osci_navigation_title['und'][0]['value'];
	}

	$plateId = 'osci_plate_fig';
	$plateFigure = array(
        'figure_reference' => $plateNid,
        'number_template' => ($catalogNumber) ? "Cat. {$catalogNumber}" : ' ',
        'caption' => $plateCaption,
        'position' => 't',
        'columns' => '55%',
        'id' => $plateId,
        'format' => 'footnote',
        'figCount' => 0,
        'figOccurences' => 1
	);

	return theme('body_copy_figure', array('figure' => $plateFigure));
	
}