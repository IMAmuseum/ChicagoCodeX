<?php

/**
 * Implementation of hook_perm
 */

function note_permission() {
    return array(
        'view own notes' => array(
            'title' => t('View own notes'),
        ),
        'create note' => array(
            'title' => t('Create Notes'),
        ),
        'administer notes' => array(
            'title' => t('Administer notes'),
        ),
    );
    
}

/**
 * Implementation of hook_init
 */
function note_init() {
    drupal_add_css(drupal_get_path('module', 'note').'/css/note.css');
    drupal_add_library('system', 'jquery.form');
    drupal_add_library('system', 'drupal.ajax');
    drupal_add_js(drupal_get_path('module', 'note').'/js/jquery.tmpl.js');
    drupal_add_js(drupal_get_path('module', 'note').'/js/jquery.osci.note.js');
}

/**
 * Implementation of hook_menu
 */
function note_menu() {
    $items = array();

    $items['admin/structure/note/manage'] = array(
        'title'             => t('Note Admin'),
        'description'       => t('Administer notes'),
        'page callback'     => 'note_admin',
        'access arguments'  => array('administer notes'),
    );

    $items['note/%note'] = array(
        'title callback'    => 'note_page_title',
        'title arguments'   => array(1),
        'page callback'     => 'note_page_view',
        'page arguments'    => array(1),
        'access callback'   => 'note_access',
        'access arguments'  => array('view', 1),
        'type'              => MENU_CALLBACK,
    );

    $items['note/%note/view'] = array(
        'title' => 'View',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -10,
    );

    $items['note/%note/edit'] = array(
        'title'             => t('Edit'), 
        'page callback'     => 'drupal_get_form',
        'page arguments'    => array('note_form', 1),
        'access callback'   => 'note_access',
        'access arguments'  => array('create', 1),
        'type'              => MENU_LOCAL_TASK,
    );

    $items['ajax/note/add'] = array(
        'title'             => t('Add a new note'),
        'page callback'     => 'note_ajax_add',
        'access arguments'  => array('create note'),
        'file'              => 'note.ajax.inc',
    );

    $items['ajax/note/load/%'] = array(
        'page callback'     => 'note_ajax_load',
        'page arguments'    => array(3),
        'access arguments'  => array(TRUE),
        'type'              => MENU_CALLBACK,
        'file'              => 'note.ajax.inc',
    );

    $items['ajax/note/save'] = array(
        'page callback'     => 'note_ajax_save',
        'page arguments'    => array(3),
        'access arguments'  => array(TRUE),
        'type'              => MENU_CALLBACK,
        'file'              => 'note.ajax.inc',
    );

    $items['ajax/note/%node'] = array(
        'page callback'     => 'user_notes_ajax',
        'page arguments'    => array(2),
        'access arguments'  => array(TRUE),
        'type'              => MENU_CALLBACK,
        'file'              => 'note.ajax.inc',
    );

    $items['ajax/note/highlight'] = array(
        'page callback'     => 'notes_highlight',
        'access arguments'   => array('TRUE'),
        'type'              => MENU_CALLBACK,
        'file'              => 'note.ajax.inc',
    );

    $items['ajax/note/note'] = array(
        'page callback'     => 'notes_note',
        'access arguments'   => array('TRUE'),
        'type'              => MENU_CALLBACK,
        'file'              => 'note.ajax.inc',
    );

    return $items;
}

function note_admin() {
    return t('Choose "manage fields" or "manage display" to begin');
}

/** 
 * implementation of hook_theme
 */
function note_theme() {
    $items = array();

    $items['note'] = array(
        'variables' => array(
            'note'  => NULL, 
            'view_mode' => 'full',
        ),
        'file'  => 'note.templates.inc',
    );

    return $items;
}

/**
 * Implementation of hook_entity_info
 */
function note_entity_info() {
    $note = array();

    $note['note'] = array(
        'label'             => t('Note'),
        'controller class'  => 'NoteEntityController',
        'base table'        => 'note',
        'fieldable'         => TRUE,
        'uri_callback'      => 'note_uri',
        'entity keys'       => array(
            'id' => 'onid',
        ),
        'view modes'        => array(
            'full' => array(
                'label'             => t('Full Note'),
                'custom settings'   => FALSE,
            ),
        ),
        'bundles' => array(
            'note' => array(
                'label' => t('Note'),
                'admin' => array(
                    'path' => 'admin/structure/note/manage',
                    'access arguments'  => array('administer notes'),
                ),
            ),
        ),
    );

    return $note;
}

function note_uri($note) {
    return array(
        'path' => 'note/' . $note->onid,
    );
}

function note_page_title($onid) {
    return $onid;
}

function note_access($op, $onid) {
    return entity_get_controller('note')->access($op, $onid);
}
/** 
 * Save a note
 * @param $note
 * The note object to save
 *
 * @return Returns the saved note object
 */
function note_save($note) {
    return entity_get_controller('note')->save($note);
}

/** 
 * Load a note
 *
 * @param $onid
 * The note id to load
 *
 * @param $condition
 * Obtional sql cinditions to include
 *
 * @param $reset
 * Set to true to invalidate the object cache
 *
 * @return the note object
 */
function note_load($onid, $conditions = array(), $reset = FALSE) {
    $onid = (is_numeric($onid)) ? array($onid) : $onid;
    $notes = entity_load('note', $onid, $conditions, $reset);

    return $notes;
}

function note_delete($onid) {
    return entity_get_controller('note')->delete($onid);
}

function note_view($note, $view_mode = 'full') {
    $note = entity_get_controller('note')->view($note, $view_mode);
    return $note;
}

function note_page_view($note) {
    return entity_get_controller('note')->build($note);
}

function note_form($form, &$form_state, $note = null) {
    global $user;

    if (!$note) {
        $note = (object) array(
            'body'              => '',
            'word_count'        => '',
            'letter_count'      => '',
            'paragraph_count'   => '',
        );
    } else {
        $note = end($note);
    }

    $form['body'] = array(
        '#title'            => t('Notes'),
        '#type'             => 'textarea',
        '#default_value'    => $note->body
    );

    $form['original_text'] = array(
        '#type'     => 'hidden',
    );

    $form['uid'] = array(
        '#type'  => 'hidden',
        '#value' => $user->uid,
    );

    $form['nid'] = array(
        '#type'  => 'hidden',
    );

    $form['word_count'] = array(
        '#type'  => 'hidden',
    );

    $form['letter_count'] = array(
        '#type'  => 'hidden',
    );

    $form['paragraph_count'] = array(
        '#type'  => 'hidden',
    );

    $form['submit'] = array(
        '#type'  => 'submit',
        '#value' => t('Save'),
    );

    field_attach_form('note', $note, $form, $form_state);

    return $form;
}

function note_form_validate($form, &$form_state) {
    $note = (object) $form_state['values'];
    field_attach_form_validate('note', $note, $form, $form_state);
}

function note_form_submit($form, &$form_state) {
    $note = (object)$form_state['values'];
    field_attach_submit('note', $note, $form, $form_state);
    if ($note = note_save($note)) {
        $form_state['redirect'] = 'note/'.$note->onid;
        drupal_set_message('Successfully saved note');
    }
}

function note_preprocess_osci_viewer(&$vars) {
    ctools_include('modal');
    ctools_modal_add_js();
    drupal_add_js(array(
        'fixed-modal' => array(
            'modalSize' => array(
                'type'      => 'fixed',
                'width'     => 400,
                'height'    => 300,
            ),
        ),
    ), 'setting');

    $items = array(
        l('Highlight', $_GET['q'], 
            array(
                'fragment' => 'note-highlight', 
                'attributes' => array(
                    'class' => array('note-highlight'),
                )
            )
        ),
        l('Note', 'ajax/note/add', 
            array(
                'attributes' => array(
                    'class' => array('ctools-use-modal', 'note-note', 'fixed-modal'),
                )
            )
        ),
    );

    $vars['notes'] = theme('item_list', 
        array(
            'items' => $items, 
            'attributes' => array(
                'class' => 'selection-toolbar'
            )
        )
    );
}

function user_notes($node) {
    global $user;
    $query = db_select('note', 'c')
        ->fields('c', array('onid', 'body', 'word_count', 'letter_count', 'paragraph_count', 'original_text'))
        ->condition('uid', $user->uid)
        ->condition('nid', $node->nid)
        ->execute();
    foreach($query as $row) {
        $rows[] = (array)$row; 
    }
    return $rows;

}
