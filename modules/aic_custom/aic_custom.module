<?php

function aic_custom_menu() {
    $items = array();
    $items['figure/window/%'] = array(
        'page callback'     => 'aic_custom_figure_window',
        'page arguments'    => array(2),
        'access arguments'  => array('access content'),
        'type'              => MENU_CALLBACK
    );
    return $items;
}

function aic_custom_theme() {
    return array(
        'aic_custom_figure_window' => array(
            'template'  => 'templates/aic_custom_figure_window',
        )
    );
}

function aic_custom_alter_epub_toc($toc) {
    // alter the toc to add thumbnails and active/inactive flag for each section
    foreach ($toc as &$tocItem) {
        $section = node_load($tocItem['nid']);
        // - thumbnails are found by taking the thumbnail field of the first found plate figure's node
        if (isset($section->field_figure['und'])) {
            foreach($section->field_figure['und'] as $index => $figure) {
                // find the first plate image
                if ($figure['position'] === 'plate') {
                    // load asset reference
                    $asset = node_load($figure['asset_reference']);
                    if ($asset) {
                        if (isset($asset->field_image['und'][0])) {
                            $tocItem['thumbnail'] = image_style_url('osci_tk_thumbnail_square', $asset->field_image['und'][0]['uri']);
                            $tocItem['thumbnail_figure_index'] = $index;
                            break;
                        }
                    }
                }
            }
        }
        // - active flag found on each section, to be added to TOC
        if (isset($section->field_active['und'][0]) && $section->field_active['und'][0]['value'] === "1") {
            $tocItem['active'] = true;
        }
        else {
            $tocItem['active'] = false;
        }
        // add in the field headings for disply in TOC
        $fieldInfo = field_info_instances('node', $section->type);
        $subHeadings = array();
        $skipFields = array('Footnotes', 'Tombstone');
        foreach($fieldInfo as $fieldName => $field) {
            if ($field['display']['epub']['type'] === 'osci_tk_section' && !in_array($field['label'], $skipFields)) {
                $value = field_get_items('node', $section, $fieldName);
                if (is_array($value) && strlen(($value['0']['value'])) > 0) {
                    array_push($subHeadings, array('id' => str_replace("field_", "", $fieldName), 'label' => $field['label']));
                }
            }
        }
        $tocItem['subHeadings'] = json_encode($subHeadings);
    }
    return array($toc);
}

function aic_custom_theme_registry_alter(&$theme_registry) {
    $theme_path = drupal_get_path('module', 'aic_custom');
    $theme_registry['osci_tk_epub_navigation_generate_toc_item_list']['theme path'] = $theme_path;
    $theme_registry['osci_tk_epub_navigation_generate_toc_item_list']['function'] = 'aic_custom_navigation_generate_toc_item_list';

    $theme_registry['osci_tk_epub_navigation_generate_index']['theme path'] = $theme_path;
    $theme_registry['osci_tk_epub_navigation_generate_index']['function'] = 'aic_custom_navigation_generate_index';

    $theme_registry['osci_tk_epub_ncx_generate_navmap']['theme path'] = $theme_path;
    $theme_registry['osci_tk_epub_ncx_generate_navmap']['function'] = 'aic_custom_ncx_generate_navmap';
}

/**
 * Implements hook_filter_info_alter()
 */
function aic_custom_filter_info_alter(&$info) {
    $info['osci_tk_glossary_terms']['process callback'] = '_aic_custom_glossary_filter';
}

function _aic_custom_glossary_filter($text, $filter, $format) {
    if (!is_numeric(arg(2))) return $text;

    global $aic_custom_current_tree;
    global $aic_custom_term_count;

    $publication = node_load(arg(2));
    $vocabulary = _osci_tk_glossary_retrieve_glossaries($publication);

    $doc = new DOMDocument('1.0', 'iso-8859-1');
    $text = mb_convert_encoding($text, 'HTML-ENTITIES', "UTF-8");
    @$doc->loadHTML($text);

    $paragraphs = $doc->getElementsByTagName('p');
    foreach($paragraphs as $p) {
        $pContent = $doc->saveXML($p);
        foreach ($vocabulary as $vocab_id) {
            $tree = taxonomy_get_tree($vocab_id);
            foreach ($tree as $leaf) {
                $aic_custom_current_tree = $leaf;
                if (!isset($aic_custom_term_count[$leaf->tid])) {
                    $pContent = preg_replace_callback('/' . $leaf->name . '\b/i', '_aic_custom_glossary_parse_term', $pContent);
                }
            }
        }

        $pContent = mb_convert_encoding($pContent, 'HTML-ENTITIES', "UTF-8");
        $tempDoc = new DOMDocument('1.0', 'iso-8859-1');
        @$tempDoc->loadHTML($pContent);
        $n = $tempDoc->getElementsByTagName('p')->item(0);
        if ($n !== null) {
            $newNode = $doc->importNode($n, true);
            $p->parentNode->replaceChild($newNode, $p);
        }
    }

    $text = $doc->saveXML($doc->documentElement);
    $text = preg_replace('~<(?:!DOCTYPE|/?(?:html|head|body))[^>]*>\s*~i', '', $text);
    $text = str_replace('<?xml version="1.0" encoding="iso-8859-1"?>', '', $text);

    return $text;
}

/**
 * Callback for parsing glossary terms
 */
function _aic_custom_glossary_parse_term($match) {
    global $aic_custom_current_tree;
    global $aic_custom_term_count;

    if (!isset($aic_custom_term_count[$aic_custom_current_tree->tid])) {
        $aic_custom_term_count[$aic_custom_current_tree->tid] = TRUE;
        return '<a class="glossary-term" data-tid="' . $aic_custom_current_tree->tid . '">' . $match[0] . '</a>';
    } else {
        return $match[0];
    }
}

function aic_custom_navigation_generate_toc_item_list(&$vars) {
    $depth = -1;
    $flag = false;
    $output = '';
    foreach ($vars['toc'][0] as $key => $leaf) {
        $node = node_load($leaf['nid']);

        while ($leaf['depth'] > $depth) {
            $output .= '<ol><li>';
            $flag = false;
            $depth++;
        }
        while ($leaf['depth'] < $depth) {
            $output .= '</li></ol>';
            $depth--;
        }
        if ($flag) {
            $output .= '</li><li>';
            $flag = false;
        }
        if (empty($node->field_active['und']) || (!empty($node->field_active['und']) && $node->field_active['und'][0]['value'])) {
            $link = $vars['for_export'] ? $leaf['filename'] : $leaf['url'];
            $attrs = "data-section_id=\"{$leaf['nid']}\"";
            $attrs .= " data-subtitle=\"{$leaf['subtitle']}\"";
            $attrs .= " data-timestamp=\"{$leaf['timestamp']}\"";
            $attrs .= " data-thumbnail=\"{$leaf['thumbnail']}\"";
            $attrs .= " data-active=\"{$leaf['active']}\"";
            $attrs .= " data-subHead='{$leaf['subHeadings']}'";
            if (isset($leaf['thumbnail_figure_index'])) {
                $attrs .= " data-thumbnail_figure_index=\"{$leaf['thumbnail_figure_index']}\"";
            }
            $output .= "<a href=\"{$link}\" {$attrs}>{$leaf['title']}</a>";
        } else {
            $output .= $leaf['title'];
        }

        $flag = true;
    }
    while ($depth-- > -1) {
        $output .= '</li></ol>';
    }
    return $output;
}

function aic_custom_navigation_generate_index(&$vars) {
    $list = '';
    $output = '';
    if (isset($vars['node']->field_nodetree['und']) && is_array($vars['node']->field_nodetree['und'])) {
        foreach ($vars['node']->field_nodetree['und'] as $nodeTreeItem) {
            $target = $nodeTreeItem['target_nid'];
            $section = node_load($target, _osci_tk_utility_retrieve_revision_id_by_timestamp($target, $vars['rev_time']));
            $link = $vars['for_export'] ? _osci_tk_epub_node_content_filename($section->nid) : _osci_tk_epub_node_content_url($section->nid, $vars['rev_time'], $vars['node']->nid);

            $title = $section->title;
            if (isset($section->field_osci_tk_title) && isset($section->field_osci_tk_title['und'][0]['value'])) {
                $title = $section->field_osci_tk_title['und'][0]['value'];
            }

            if (empty($section->field_active['und']) || (!empty($section->field_active['und']) && $section->field_active['und'][0]['value'])) {
                $list .= "<li><a href='{$link}'>{$title}</a></li>";

                // if section has figures, include them in index
                if (isset($section->field_figure['und']) && count($section->field_figure['und']) > 0) {
                    for ($i=0; $i < count($section->field_figure['und']); $i++) {
                        $figure = $section->field_figure['und'][$i];
                        $link = $vars['for_export'] ? _osci_tk_epub_node_figure_filename($section->nid, $i) : _osci_tk_epub_node_figure_url($section->nid, $i, $vars['rev_time'], $vars['node']->nid);
                        $list .= "<li><a href='{$link}'>{$title}: Fig. {$i}</a></li>";
                    }
                }
            } else {
                $list .= "<li>{$title}</li>";
            }
        }
    }

    $output = "<nav epub:type='index' id='book-{$vars['node']->nid}-index'>";
    $output .= "<h1>Index</h1>"; // Optional header
    $output .= "<ol>{$list}</ol>"; // The only other element allowed as a child of <nav>
    $output .= "</nav>";
    return $output;
}

function aic_custom_ncx_generate_navmap(&$vars) {
    $output = null;
    if (!is_null($vars['data']['content_nids'])) {
        // Not using templates for performance. Might consider an XML library.
        $output = "<navMap>";
        $count = 0;
        foreach($vars['data']['content_nids'] as $content) {
            $count++;
            $node = node_load($content['nid']);

            if (empty($node->field_active['und']) || (!empty($node->field_active['und']) && $node->field_active['und'][0]['value'])) {
                $url = $vars['for_export'] ? $content['filename'] : $content['url'];
                $output .= '<navPoint id="section-' . $content['nid'] . '" playOrder="' . $count . '"><navLabel><text>' . $content['title'] . '</text></navLabel><content src="' . $url . '" /></navPoint>';
            }
        }

        $output .= "</navMap>";
    }

    return $output;
}

function aic_custom_osci_tk_webapp_custom_alter(&$js, &$css) {
    $css[] = "/frontend/css/common.css";
    $css[] = "/frontend/css/toolbar.css";
    $css[] = "/frontend/css/title.css";
    $css[] = "/frontend/css/section.css";
    $css[] = "/frontend/css/multiColumnSection.css";
    $css[] = "/frontend/css/referenceImage.css";
    $css[] = "/frontend/css/toc.css";
    $css[] = "/frontend/css/footnotes.css";
    $css[] = "/frontend/css/figures.css";
    $css[] = "/frontend/css/layered_image.css";
    $css[] = "/frontend/css/navigation.css";
    $css[] = "/frontend/css/paragraphs.css";
    $css[] = "/frontend/css/notes.css";
    $css[] = "/frontend/css/glossary.css";
    $css[] = "/frontend/css/search.css";

    $js[] = "/frontend/js/oscitk/collections/NavigationItemsCollection.js";
    $js[] = "/frontend/js/oscitk/views/AppView.js";
    $js[] = "/frontend/js/oscitk/views/TitleView.js";
    $js[] = "/frontend/js/oscitk/views/ToolbarView.js";
    $js[] = "/frontend/js/oscitk/views/ToolbarItemView.js";
    $js[] = "/frontend/js/oscitk/views/TextEnlargeView.js";
    $js[] = "/frontend/js/oscitk/views/TextReduceView.js";
    $js[] = "/frontend/js/oscitk/views/PrintView.js";
    $js[] = "/frontend/js/oscitk/views/AccountView.js";
    $js[] = "/frontend/js/oscitk/views/SearchView.js";
    $js[] = "/frontend/js/oscitk/views/TocView.js";
    $js[] = "/frontend/js/oscitk/views/BottomDrawerView.js";
    $js[] = "/frontend/js/oscitk/views/FootnotesView.js";
    $js[] = "/frontend/js/oscitk/views/FiguresView.js";
    $js[] = "/frontend/js/oscitk/views/GlossaryView.js";
    $js[] = "/frontend/js/oscitk/views/PersistentNotesView.js";
    $js[] = "/frontend/js/oscitk/views/ReferenceImageView.js";
}

function aic_custom_figure_window($section_nid, $figIndex=null) {
    $section = node_load($section_nid);
    if (!$section || !isset($section->field_figure['und'][$figIndex])) {
        drupal_not_found();
        return;
    }
    $figure = node_load($section->field_figure['und'][$figIndex]['asset_reference']);
    if ($figure) {
        $hook = 'figure_html_' . $figure->type;
        $return = module_invoke_all($hook, $figure);
        if (isset($return[0])) {
            $content = "<figure>" . $return[0] . "</figure>";
        }
        else {
            $view = node_view($section, 'epub');
            $content = drupal_render($view['field_figure'][$figIndex]);
        }
        // wrap in an html doc and link in necessary js
        print(theme('aic_custom_figure_window', array(
            'caption' => $section->field_figure['und'][$figIndex]['value'],
            'path' => variable_get('osci_tk_webapp_base_path', ''),
            'content' => $content,
            'type' => $figure->type
        )));
        drupal_exit();
    }
    else {
        drupal_not_found();
        return;
    }
}

function aic_custom_osci_tk_figure_number_template_alter(&$replace, $data) {
    $sectionNode = node_load($data['sectionNid']);
    $cat = '';
    if ($sectionNode
        && isset($sectionNode->field_catalogue_number)
        && is_array($sectionNode->field_catalogue_number)
        && $sectionNode->field_catalogue_number['und'][0]['value']) {

        $cat = $sectionNode->field_catalogue_number['und'][0]['value'];
    }

    $replace['cat#'] = $cat;
}

/**
 * Create the content for a figure based on the asset type
 */
function aic_custom_osci_tk_figure_content($args) {
    $asset = node_load($args['item']['asset_reference']);

    if (!isset($args['item']['export'])) {
        $args['item']['export'] = false;
    }

    switch($asset->type) {
        case 'html_figure':
            $fieldView = field_view_field('node', $asset, 'field_figure_content', 'epub');
            return drupal_render($fieldView);
            break;
    }
}

function aic_custom_osci_tk_citation_alter(&$citation, $section, $publication) {

    $authorFieldMap = array(
        'tombstone' => 'field_authors_tombstone',
        'entry' => 'field_author_curatorial_entry',
        'report' => 'field_author_technical_report'
    );

    $titleFieldMap = array(
        'tombstone' => 'Tombstone',
        'entry' => 'Curatorial Entry',
        'report' => 'Technical Report',
        'provenance' => 'Provenance',
        'history' => 'Exhibition History',
        'references' => 'Selected References',
        'documentation' => 'Other Documentation',
        'biography' => 'Brief Biography',
    );

    if (array_key_exists($citation['field'], $titleFieldMap)) {
        $citation['title'] = $citation['title'] . " : " . $titleFieldMap[$citation['field']];
    }

    $creatorField = null;
    if (array_key_exists($citation['field'], $authorFieldMap)) {
        $creatorField = $authorFieldMap[$citation['field']];
    }

    //Get the Creator from section if set
    if (isset($section->$creatorField) && isset($section->{$creatorField}['und'])) {
        $citation['creator'] = array();
        foreach($section->{$creatorField}['und'] as $v) {
            $citation['creator'][] = $v['value'];
        }
    }

    //Get the citation Date from publication if set
    if (isset($publication->field_publication_date) &&
        isset($publication->field_publication_date['und']) &&
        strlen($publication->field_publication_date['und'][0]['value']))
    {
        $citation['date'] = $publication->field_publication_date['und'][0]['value'];
    }

    //Get the Editor from publication if set
    if (isset($publication->field_osci_tk_editor) &&
        isset($publication->field_osci_tk_editor['und']) &&
        strlen($publication->field_osci_tk_editor['und'][0]['value']))
    {
        $citation['editor'] = $publication->field_osci_tk_editor['und'][0]['value'];
    }
}
