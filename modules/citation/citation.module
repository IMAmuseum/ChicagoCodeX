<?php

/**
 * Implementation of hook_perm
 */

function citation_permission() {
    return array(
        'view own citations' => array(
            'title' => t('View own citations'),
        ),
        'create citation' => array(
            'title' => t('Create Citations'),
        ),
        'administer citations' => array(
            'title' => t('Administer citations'),
        ),
    );
    
}

/**
 * Implementation of hook_init
 */
function citation_init() {
    drupal_add_css(drupal_get_path('module', 'citation').'/css/citation.css');
    drupal_add_library('system', 'jquery.form');
    drupal_add_library('system', 'drupal.ajax');
    drupal_add_js(drupal_get_path('module', 'citation').'/js/jquery.tmpl.js');
    drupal_add_js(drupal_get_path('module', 'citation').'/js/jquery.osci.citation.js');
}

/**
 * Implementation of hook_menu
 */
function citation_menu() {
    $items = array();

    $items['admin/structure/citation/manage'] = array(
        'title'             => t('Citation Admin'),
        'description'       => t('Administer citations'),
        'page callback'     => 'citation_admin',
        'access arguments'  => array('administer citations'),
    );

    $items['citation/%citation'] = array(
        'title callback'    => 'citation_page_title',
        'title arguments'   => array(1),
        'page callback'     => 'citation_page_view',
        'page arguments'    => array(1),
        'access callback'   => 'citation_access',
        'access arguments'  => array('view', 1),
        'type'              => MENU_CALLBACK,
    );

    $items['citation/%citation/view'] = array(
        'title' => 'View',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -10,
    );

    $items['citation/%citation/edit'] = array(
        'title'             => t('Edit'), 
        'page callback'     => 'drupal_get_form',
        'page arguments'    => array('citation_form', 1),
        'access callback'   => 'citation_access',
        'access arguments'  => array('create', 1),
        'type'              => MENU_LOCAL_TASK,
    );

    $items['ajax/citation/add'] = array(
        'title'             => t('Add a new citation'),
        'page callback'     => 'citation_ajax_add',
        'access arguments'  => array('create citation'),
        'file'              => 'citation.ajax.inc',
    );

    $items['ajax/citation/load/%'] = array(
        'page callback'     => 'citation_ajax_load',
        'page arguments'    => array(3),
        'access arguments'  => array(TRUE),
        'type'              => MENU_CALLBACK,
        'file'              => 'citation.ajax.inc',
    );

    $items['ajax/citation/%node'] = array(
        'page callback'     => 'user_citations_ajax',
        'page arguments'    => array(2),
        'access arguments'  => array(TRUE),
        'type'              => MENU_CALLBACK,
        'file'              => 'citation.ajax.inc',
    );

    $items['ajax/citation/highlight'] = array(
        'page callback'     => 'citations_highlight',
        'access arguments'   => array('TRUE'),
        'type'              => MENU_CALLBACK,
        'file'              => 'citation.ajax.inc',
    );

    $items['ajax/citation/note'] = array(
        'page callback'     => 'citations_note',
        'access arguments'   => array('TRUE'),
        'type'              => MENU_CALLBACK,
        'file'              => 'citation.ajax.inc',
    );

    return $items;
}

function citation_admin() {
    return t('Choose "manage fields" or "manage display" to begin');
}

/** 
 * implementation of hook_theme
 */
function citation_theme() {
    $items = array();

    $items['citation'] = array(
        'variables' => array(
            'citation'  => NULL, 
            'view_mode' => 'full',
        ),
        'file'  => 'citation.templates.inc',
    );

    return $items;
}

/**
 * Implementation of hook_entity_info
 */
function citation_entity_info() {
    $citation = array();

    $citation['citation'] = array(
        'label'             => t('Citation'),
        'controller class'  => 'CitationEntityController',
        'base table'        => 'citation',
        'fieldable'         => TRUE,
        'uri_callback'      => 'citation_uri',
        'entity keys'       => array(
            'id' => 'cid',
        ),
        'view modes'        => array(
            'full' => array(
                'label'             => t('Full Citation'),
                'custom settings'   => FALSE,
            ),
        ),
        'bundles' => array(
            'citation' => array(
                'label' => t('Citation'),
                'admin' => array(
                    'path' => 'admin/structure/citation/manage',
                    'access arguments'  => array('administer citations'),
                ),
            ),
        ),
    );

    return $citation;
}

function citation_uri($citation) {
    return array(
        'path' => 'citation/' . $citation->cid,
    );
}

function citation_page_title($cid) {
    return $cid;
}

function citation_access($op, $cid) {
    return entity_get_controller('citation')->access($op, $cid);
}
/** 
 * Save a citation
 * @param $citation
 * The citation object to save
 *
 * @return Returns the saved citation object
 */
function citation_save($citation) {
    return entity_get_controller('citation')->save($citation);
}

/** 
 * Load a citation
 *
 * @param $cid
 * The citation id to load
 *
 * @param $condition
 * Obtional sql cinditions to include
 *
 * @param $reset
 * Set to true to invalidate the object cache
 *
 * @return the citation object
 */
function citation_load($cid, $conditions = array(), $reset = FALSE) {
    $cid = (is_numeric($cid)) ? array($cid) : $cid;
    $citations = entity_load('citation', $cid, $conditions, $reset);

    return $citations;
}

function citation_delete($cid) {
    return entity_get_controller('citation')->delete($cid);
}

function citation_view($citation, $view_mode = 'full') {
    $citation = entity_get_controller('citation')->view($citation, $view_mode);
    return $citation;
}

function citation_page_view($citation) {
    return entity_get_controller('citation')->build($citation);
}

function citation_form($form, &$form_state, $citation = null) {
    global $user;

    if (!$citation) {
        $citation = (object) array(
            'body'              => '',
            'word_count'        => '',
            'letter_count'      => '',
            'paragraph_count'   => '',
        );
    } else {
        $citation = end($citation);
    }

    $form['body'] = array(
        '#title'            => t('Notes'),
        '#type'             => 'textarea',
        '#default_value'    => $citation->body
    );

    $form['original_text'] = array(
        '#type'     => 'hidden',
    );

    $form['uid'] = array(
        '#type'  => 'hidden',
        '#value' => $user->uid,
    );

    $form['nid'] = array(
        '#type'  => 'hidden',
    );

    $form['word_count'] = array(
        '#type'  => 'hidden',
    );

    $form['letter_count'] = array(
        '#type'  => 'hidden',
    );

    $form['paragraph_count'] = array(
        '#type'  => 'hidden',
    );

    $form['submit'] = array(
        '#type'  => 'submit',
        '#value' => t('Save'),
    );

    field_attach_form('citation', $citation, $form, $form_state);

    return $form;
}

function citation_form_validate($form, &$form_state) {
    $citation = (object) $form_state['values'];
    field_attach_form_validate('citation', $citation, $form, $form_state);
}

function citation_form_submit($form, &$form_state) {
    $citation = (object)$form_state['values'];
    field_attach_submit('citation', $citation, $form, $form_state);
    if ($citation = citation_save($citation)) {
        $form_state['redirect'] = 'citation/'.$citation->cid;
        drupal_set_message('Successfully saved citation');
    }
}

function citation_preprocess_osci_viewer(&$vars) {
    ctools_include('modal');
    ctools_modal_add_js();
    drupal_add_js(array(
        'fixed-modal' => array(
            'modalSize' => array(
                'type'      => 'fixed',
                'width'     => 400,
                'height'    => 300,
            ),
        ),
    ), 'setting');

    $items = array(
        l('Highlight', $_GET['q'], 
            array(
                'fragment' => 'citation-highlight', 
                'attributes' => array(
                    'class' => array('citation-highlight'),
                )
            )
        ),
        l('Note', 'ajax/citation/add', 
            array(
                'attributes' => array(
                    'class' => array('ctools-use-modal', 'citation-note', 'fixed-modal'),
                )
            )
        ),
    );

    $vars['citations'] = theme('item_list', 
        array(
            'items' => $items, 
            'attributes' => array(
                'class' => 'selection-toolbar'
            )
        )
    );
}

function user_citations($node) {
    global $user;
    $query = db_select('citation', 'c')
        ->fields('c', array('cid', 'body', 'word_count', 'letter_count', 'paragraph_count', 'original_text'))
        ->condition('uid', $user->uid)
        ->condition('nid', $node->nid)
        ->execute();
    foreach($query as $row) {
        $rows[] = (array)$row; 
    }
    return $rows;

}
