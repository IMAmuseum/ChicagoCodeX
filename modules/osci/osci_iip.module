<?php 


function osci_iip_menu() {
    $items = array();

    $items['iip-demo'] = array(
        'title'             => t('IIP Demo'),
        'page callback'     => 'osci_iip_demo',
        'access arguments'  => array('access content'),
    );

    return $items;
}

function osci_iip_demo() {
	drupal_add_js(drupal_get_path('module', 'osci_iip').'/js/osci_iip_nns.min.js');
	drupal_add_js(drupal_get_path('module', 'osci_iip').'/js/osci_iip_polymaps.min.js');
	drupal_add_js(drupal_get_path('module', 'osci_iip').'/js/osci_iip.js');
	$node = node_load(19);
	
	$return = "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis imperdiet aliquam quam nec volutpat. Ut sem eros, tincidunt in vestibulum quis, hendrerit at leo. Ut nibh elit, sollicitudin nec tempor in, malesuada nec ante.</p>";
    $return .= '<div style="width:320px; height:240px;">';
	$return .= _osci_iip_create_iip_div($node, $node->nid);
	$return .= '</div>';
    $return .= "<style>.layer path { fill: none; stroke: red; stroke-width: 4; vector-effect: non-scaling-stroke;}</style>";
    
    // And again
    $node = node_load(20);
	$attr = _osci_iip_get_image_attr(20);
	$return .= '<p>&nbsp;<p>Mauris condimentum tincidunt ligula et adipiscing. Mauris leo nibh, iaculis quis tincidunt nec, pretium nec erat. Curabitur dui sem, dignissim sit amet condimentum in, ultrices eu nisl. Vivamus vestibulum tellus sit amet dui bibendum sagittis.</p>';
    $return .= '<div style="width:640px; height:480px;">';
	$return .= _osci_iip_create_iip_div($node, $node->nid);    
    $return .= '</div>';
	$return .= '<style>.chevron{stroke:#FFF} .direction{stroke:#CCC} .back{stroke:#000} .fore{stroke:#CCC}</style>';
	
	// make it live!
	$return .= '<script type="text/javascript">(function($) { $(document).ready(function()	{ $(".iipmap").each(function(){ iipmap($(this)); }); }); }) (jQuery);</script>';
    return $return;
}

function osci_iip_node_insert($node) {	
	if ($node->type == 'image') {
		if(!isset($node->field_aspect_ratio['und'][0]['value'])) {
			_osci_iip_save_aspect_ratio($node->nid);
		}
		// Retrieve image from IIP server and set it as the image field
	}
}

function osci_iip_node_update($node) {
	if ($node->type == 'image' && (!isset($node->field_aspect_ratio['und'][0]['value']))) {
		_osci_iip_save_aspect_ratio($node->nid);		
	}
}


function _osci_iip_save_aspect_ratio($nid) {
	// Retrieve and store aspect ratio - called in node_insert and node_update
	// x:1(y) where x is the stored value and y is the constant 1
	$node = node_load($nid);
	$attr = _osci_iip_get_image_attr($node->nid);
	$ar = ($attr['iw'] / $attr['ih']);
	$node->field_aspect_ratio['und'][0]['value'] = round($ar, 4);
	node_save($node);
}

function _osci_iip_get_image_attr($nid) {
	if (!is_numeric($nid)) return false;
	$iipsrv = "http://stanley.imamuseum.org/fcgi-bin/iipsrv.fcgi?";
	$node = node_load($nid);
	$ptiff = $node->field_ptiff['und'][0]['value'];
	// Get image data as a text response from the IIP server
	// Must supply the fif parameter
	$url = $iipsrv.'FIF='.$ptiff.'&OBJ=Basic-info';
	$curl = curl_init($url);
	curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
	$res = curl_exec($curl);
	if(!stristr($res, 'error')) {
		// Parse the image maximum dimensions and the number of zoom layers
		preg_match('/Max-size:(\d+) (\d+)/', $res, $matches);
		$iw = $matches[1];
		$ih = $matches[2];
		preg_match('/Resolution-number:(\d+)/', $res, $matches);
		$zl = $matches[1];
		
		// Craft our return response
		$ret = array(
			'iw' => $iw, 
			'ih' => $ih,
			'zl' => $zl,
		);
		return $ret;
	}
	return false;
}

function _osci_iip_create_iip_div($node, $figure_id) {
	$attr = _osci_iip_get_image_attr($node->nid);
	$ret = '<div id="map_'.$figure_id.'" class="iipmap" data-node="'.$node->nid.'" ';
	$ret .= 'data-iw="'.$attr['iw'].'" data-ih="'.$attr['ih'].'" data-zl="'.$attr['zl'].'" ';
	$ret .= 'data-ptiff="'.$node->field_ptiff['und'][0]['value'].'" data-figure-id="'.$figure_id.'"';
	$ret .= 'data-collapsed="true" style="width: 100%; height: 100%; position:relative; background-color: rgba(0,0,0,.8);"></div>';
	$ret .= "<style>.layer path { fill: none; stroke: #00FF00; stroke-width: 3; vector-effect: non-scaling-stroke;}</style>";
	$ret .= '<style>.chevron{stroke:#FFF} .direction{stroke:#CCC} .back{stroke:#000} .fore{stroke:#CCC}</style>';
	return $ret;
}