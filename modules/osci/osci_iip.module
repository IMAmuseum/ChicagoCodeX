<?php 


function osci_iip_menu() {
    $items = array();

    $items['iip-demo'] = array(
        'title'             => t('IIP Demo'),
        'page callback'     => 'osci_iip_demo',
        'access arguments'  => array('access content'),
    );

    return $items;
}

function osci_iip_demo() {
	drupal_add_js(drupal_get_path('module', 'osci_iip').'/js/osci_iip_nns.min.js');
	drupal_add_js(drupal_get_path('module', 'osci_iip').'/js/osci_iip_polymaps.min.js');
	drupal_add_js(drupal_get_path('module', 'osci_iip').'/js/osci_iip.js');
	$node = node_load(19);
	$attr = _osci_iip_get_image_attr(19);
	$return = "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis imperdiet aliquam quam nec volutpat. Ut sem eros, tincidunt in vestibulum quis, hendrerit at leo. Ut nibh elit, sollicitudin nec tempor in, malesuada nec ante.</p>";
    $return .= '<div id="map_19" class="iipmap" data-node="'.$node->nid.'" '
    	.'data-iw="'.$attr['iw'].'" data-ih="'.$attr['ih'].'" data-zl="'.$attr['zl'].'" '
    	.'data-collapsed="true" style="width: 640px; height: 480px; position:relative; background-color: rgba(0,0,0,.8);"></div>';
    $return .= _osci_iip_build_tile_loader(19);
    $return .= "<style>.layer path { fill: none; stroke: red; stroke-width: 4; vector-effect: non-scaling-stroke;}</style>";
    
    // And again
    $node = node_load(20);
	$attr = _osci_iip_get_image_attr(20);
	$return .= '<p>&nbsp;<p>Mauris condimentum tincidunt ligula et adipiscing. Mauris leo nibh, iaculis quis tincidunt nec, pretium nec erat. Curabitur dui sem, dignissim sit amet condimentum in, ultrices eu nisl. Vivamus vestibulum tellus sit amet dui bibendum sagittis.</p>';
    $return .= '<div id="map_20" class="iipmap" data-node="'.$node->nid.'" '
    	.'data-iw="'.$attr['iw'].'" data-ih="'.$attr['ih'].'" data-zl="'.$attr['zl'].'" '
    	.'data-collapsed="true" style="width: 640px; height: 480px; position:relative; background-color: rgba(0,0,0,.8);"></div>';
    $return .= _osci_iip_build_tile_loader(20);
    
    
    $return .= '<style>.chevron{stroke:#FFF} .direction{stroke:#CCC} .back{stroke:#000} .fore{stroke:#CCC}</style>';
    return $return;
}

function osci_iip_node_insert($node) {	
	if ($node->type == 'image' && (!isset($node->field_aspect_ratio['und'][0]['value']))) {
		_osci_iip_save_aspect_ratio($node->nid);		
	}
}

function osci_iip_node_update($node) {
	dpm($node);
	if ($node->type == 'image' && (!isset($node->field_aspect_ratio['und'][0]['value']))) {
		_osci_iip_save_aspect_ratio($node->nid);		
	}
}


function _osci_iip_save_aspect_ratio($nid) {
	// Retrieve and store aspect ratio - called in node_insert and node_update
	// x:1(y) where x is the stored value and y is the constant 1
	$node = node_load($nid);
	$attr = _osci_iip_get_image_attr($node->nid);
	$ar = ($attr['iw'] / $attr['ih']);
	$node->field_aspect_ratio['und'][0]['value'] = round($ar, 4);
	node_save($node);
}

function _osci_iip_build_tile_loader($nid) {
	if(is_numeric($nid)) {
		$node = node_load($nid);
		$attr = _osci_iip_get_image_attr($nid);
		$iipsrv = 'http://stanley.imamuseum.org/fcgi-bin/iipsrv.fcgi';
		$return  = '<script type="text/javascript">'."\n".
			'function tile_loader_'.$nid.'(c) {'."\n".
				// Set up our context for this node
				'var ptiff = "'.$node->field_ptiff['und'][0]['value'].'";'."\n".
				'var image_h = '.$attr['ih'].';'."\n".
				'var image_w = '.$attr['iw'].';'."\n".
				'var zoom_max = '.$attr['zl'].' - 1;'."\n".
				'var tile_size = 256;'."\n".
				// Determine the scale factor of this zoom
				'var scale = Math.pow(2, zoom_max - c.zoom);'."\n".
				// Figure out the w/h of the image at this zoom
				'var mw = Math.round(image_w / scale);'."\n".
				'var mh = Math.round(image_h / scale);'."\n".
				// Figure out how many tiles are at this zoom
				'var tw = Math.ceil(mw / tile_size);'."\n".
				'var th = Math.ceil(mh / tile_size);'."\n".
				// Everything above this point should be cached per zoom level
				// Bail out if this tile if out of range
				'if (c.row < 0 || c.row >= th || c.column < 0 || c.column >= tw) return;'."\n".
				// If this is an edge case, we need to adjust the size
				'if (c.row == (th - 1)) {'."\n".
					'c.element.setAttribute("height", mh % tile_size);'."\n".		
				'}'."\n".
				'if (c.column == (tw - 1)) {'."\n".
					'c.element.setAttribute("width", mw % tile_size);'."\n".
				'}'."\n".
				'return "'.$iipsrv.'?fif=" + ptiff + "&jtl=" + c.zoom + "," + ((c.row * tw) + c.column);'."\n".
			'}'."\n";
			
		$return .= '</script>';
		return $return;
	}	
}

function _osci_iip_get_image_attr($nid) {
	if (!is_numeric($nid)) return false;
	$iipsrv = "http://stanley.imamuseum.org/fcgi-bin/iipsrv.fcgi?";
	$node = node_load($nid);
	$ptiff = $node->field_ptiff['und'][0]['value'];
	// Get image data as a text response from the IIP server
	// Must supply the fif parameter
	$url = $iipsrv.'FIF='.$ptiff.'&OBJ=Basic-info';
	$curl = curl_init($url);
	curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
	$res = curl_exec($curl);
	if(!stristr($res, 'error')) {
		// Parse the image maximum dimensions and the number of zoom layers
		preg_match('/Max-size:(\d+) (\d+)/', $res, $matches);
		$iw = $matches[1];
		$ih = $matches[2];
		preg_match('/Resolution-number:(\d+)/', $res, $matches);
		$zl = $matches[1];
		
		// Craft our return response
		$ret = array(
			'iw' => $iw, 
			'ih' => $ih,
			'zl' => $zl,
		);
		return $ret;
	}
	return false;
}