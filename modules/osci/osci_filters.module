<?php

/***********************************************************************
 *
 * Drupal Hooks
 *
 */

function osci_filters_init() {
    drupal_add_js(drupal_get_path('module', 'osci_filters').'/js/osci_filters.js', array('weight' => '5'));
    drupal_add_css(drupal_get_path('module', 'osci_filters').'/css/osci_filters.css');
    $settings = array(
        'osci_filters' => array(
            'modulePath' => base_path().drupal_get_path('module', 'osci_filters'),
        ),
    );
    drupal_add_js($settings, 'setting');
}

/**
 * Implementation of hook_filter_info
 */
function osci_filters_filter_info() {
    $filters = array();

    // Footnotes
    $filters['osci_footnote'] = array(
        'title'             => t('Footnote filter'),
        'description'       => t('Allow filters for footnotes'),
        'process callback'  => '_filter_footnote',
        'settings callback' => '_filter_settings',
        'tips callback'     => '_filter_footnote_tips',
    );

    $filters['osci_figure'] = array(
        'title'             => t('Figure filter'),
        'description'       => t('Add references to figure images in content'),
        'process callback'  => '_filter_figure',
        'settings callback' => '_filter_settings',
        'tips callback'     => '_filter_figure_tips',
    );

    return $filters;
}

/**
 * Implementation of hook_theme
 */
function osci_filters_theme() {

}

/**
 * Implementation of hook_wysiwyg_plugin
 */
function osci_filters_wysiwyg_plugin($editor, $version) {
    switch($editor) {
        case 'ckeditor':
            return array(
                'osci_filters' => array(
                    'path'      => drupal_get_path('module', 'osci_filters').'/js/osci_filters.plugin.js',
                    'buttons'   => array(
                        'footnote' => t('OSCI - Footnote'),
                    ),
                    'load'      => TRUE,
                ),
            );
    }
}

/**
 * Empty settings function, seems to be required by hook_filter_info
 */
function _filter_settings() {}

/***********************************************************************
 *
 * FOOTNOTE
 *
 */

/**
 * Process callback for filter
 */
function _filter_footnote($text, $filter, $format) {
    $regex = '/\[footnote:(.*?)\]/i';
    return preg_replace_callback($regex, '_process_footnote', $text);
}

/**
 * Regex replace callback
 */
function _process_footnote($text) {
    if (empty($text[1])) return $text[0]; 
    return '<a href="#'.$text[1].'" class="superscript footnote-link">'.$text[1].'</a>'; 
}

/**
 * Tooltip funcion
 */
function _filter_footnote_tips() {
    return t('Insert a footnote with [footnote:ID]');
}


/***********************************************************************
 *
 * FIGURE
 *
 */

function _filter_figure($text, $filter, $format) {
    $regex = '/\[figure:(.*?)\]/i';
    return preg_replace_callback($regex, '_process_figure', $text);
}

function _process_figure($text) {
    $data = _process_args($text[1]);
    dpm($data);
}

function _filter_figure_tips() {
    return t('[figure:identifier|col=columns|pos=position]

        <p><b>identifier</b> - A string identifier for the figure. 
        All media types will have a required identifier field. From 
        the sample data, Mon-33.439-Ste-Adresse_MAC-19.jpg, the 
        identifier would be MAC-19.</p>

        <p><b>columns</b> - A hint of how many columns the figure 
        should span on a page. This can be either a number 
        (1 or greater) or a percentage (0%-100%).</p>

        <p><b>position</b> - A hint on how to place the figure on 
        a page. Possible values:
        <ul>
            <li>t - top</li>
            <li>b - bottom</li>
            <li>tl - top-left</li>
            <li>tr - top-right</li>
            <li>bl - bottom-left</li>
            <li>br - bottom-right</li>
            <li>p - full page</li>
        </ul>
    ');
}
/************** INSERT OTHER FILTER FUNCTIONS HERE ********************/


/***********************************************************************
 *
 * HELPER FUNCTIONS
 *
 */

/*
 * @param $text
 * A string of text with arguments
 * @return
 * A keyed array with id and args
 */
function _process_args($text) {
    $data = array();
    list($data['id'], $args) = explode('|', $text);
    $args = explode(',', $args);

    foreach ($args as $val) {
        $arg = explode('=', $val);
        $data['args'][$arg[0]] = $arg[1];
    }

    return $data;
}
